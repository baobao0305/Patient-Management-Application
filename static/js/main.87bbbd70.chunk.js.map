{"version":3,"sources":["components/PatientList.js","components/AddPatientForm.js","components/UpdatePatientForm.js","components/PatientDetail.js","App.js","reportWebVitals.js","index.js"],"names":["PatientList","patients","setPatients","useState","filteredPatients","setFilteredPatients","search","setSearch","page","setPage","rowsPerPage","setRowsPerPage","error","setError","navigate","useNavigate","useEffect","async","data","axios","get","Array","isArray","$values","fetchPatients","filterPatients","lowercasedSearch","toLowerCase","filtered","filter","patient","_patient$dateOfBirth","matchesName","firstName","lastName","includes","matchesDOB","dateOfBirth","matchesContact","contactInfo","some","contact","contactDetail","matchesStatus","isActive","React","createElement","className","Paper","Box","p","display","flexDirection","gap","alignItems","TextField","variant","label","value","onChange","e","target","InputProps","endAdornment","IconButton","SearchIcon","fullWidth","Button","color","startIcon","AddIcon","onClick","handleAddPatient","Snackbar","open","autoHideDuration","onClose","Alert","severity","Table","TableHead","TableRow","TableCell","TableBody","slice","map","key","patientID","dateString","date","Date","String","getDate","padStart","getMonth","getFullYear","formatDate","Tooltip","title","handleViewDetails","VisibilityIcon","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","AddPatientForm","setFirstName","setLastName","gender","setGender","setDateOfBirth","phones","setPhones","emails","setEmails","primaryAddress","setPrimaryAddress","secondaryAddress","setSecondaryAddress","setIsActive","style","padding","onSubmit","preventDefault","ContactInfo","phone","ContactType","ContactDetail","email","Addresses","AddressType","AddressDetail","response","post","console","log","alert","request","message","margin","required","FormControl","InputLabel","Select","MenuItem","type","InputLabelProps","shrink","index","marginBottom","handleChangePhone","newPhones","i","size","_","handleRemovePhone","marginLeft","DeleteIcon","handleAddPhone","handleChangeEmail","newEmails","handleRemoveEmail","handleAddEmail","marginTop","UpdatePatientForm","id","useParams","setPatient","phoneContacts","emailContacts","inactiveReason","patientData","addresses","contactsData","contacts","c","contactType","setMinutes","getMinutes","getTimezoneOffset","formattedDateOfBirth","toISOString","split","fetchPatient","handleChange","name","handleChangeContact","updatedContacts","handleAddContact","handleRemoveContact","trim","dataToSubmit","PatientID","put","select","PatientDetail","status","toLocaleDateString","Typography","mt","handleUpdate","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.87bbbd70.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table, TableHead, TableBody, TableRow, TableCell, Paper, TextField, TablePagination, Box, IconButton, Tooltip, Button, Snackbar, Alert } from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport { useNavigate } from 'react-router-dom';\n\nconst PatientList = () => {\n  const [patients, setPatients] = useState([]);\n  const [filteredPatients, setFilteredPatients] = useState([]);\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const response = await axios.get('https://localhost:7141/api/patients');\n        const data = response.data;\n        if (data && Array.isArray(data.$values)) {\n          setPatients(data.$values);\n          setFilteredPatients(data.$values);\n        } else {\n          setError('Unexpected data format.');\n        }\n      } catch (error) {\n        setError('Error fetching patients.');\n      }\n    };\n\n    fetchPatients();\n  }, []);\n\n  useEffect(() => {\n    const filterPatients = () => {\n      const lowercasedSearch = search.toLowerCase();\n\n      const filtered = patients.filter(patient => {\n        const fullName = `${patient.firstName} ${patient.lastName}`.toLowerCase();\n        const matchesName = fullName.includes(lowercasedSearch);\n        const matchesDOB = patient.dateOfBirth?.includes(lowercasedSearch);\n        const matchesContact = patient.contactInfo && patient.contactInfo.some(contact => contact.contactDetail.toLowerCase().includes(lowercasedSearch));\n        const matchesStatus = patient.isActive.toLowerCase().includes(lowercasedSearch);\n\n        return (\n          matchesName ||\n          matchesDOB ||\n          matchesContact ||\n          matchesStatus\n        );\n      });\n\n      setFilteredPatients(filtered);\n    };\n\n    filterPatients();\n  }, [search, patients]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleViewDetails = (patientID) => {\n    navigate(`/patient-detail/${patientID}`);\n  };\n\n  const handleAddPatient = () => {\n    navigate('/add-patient');\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Patient List</h2>\n      <Paper>\n        <Box p={2} display=\"flex\" flexDirection=\"column\" gap={2}>\n          <Box display=\"flex\" gap={2} alignItems=\"center\">\n            <TextField\n              variant=\"outlined\"\n              label=\"Search (Name, Date of Birth, or Status)\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <IconButton>\n                    <SearchIcon />\n                  </IconButton>\n                ),\n              }}\n              fullWidth\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddIcon />}\n              onClick={handleAddPatient}\n            >\n              Add Patient\n            </Button>\n          </Box>\n          {error && (\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\n              <Alert onClose={() => setError(null)} severity=\"error\">\n                {error}\n              </Alert>\n            </Snackbar>\n          )}\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>First Name</TableCell>\n                <TableCell>Last Name</TableCell>\n                <TableCell>Date of Birth</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredPatients.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((patient) => (\n                <TableRow key={patient.patientID}>\n                  <TableCell>{patient.firstName}</TableCell>\n                  <TableCell>{patient.lastName}</TableCell>\n                  <TableCell>{formatDate(patient.dateOfBirth)}</TableCell>\n                  <TableCell>{patient.isActive}</TableCell>\n                  <TableCell>\n                    <Tooltip title=\"View Details\">\n                      <IconButton color=\"primary\" onClick={() => handleViewDetails(patient.patientID)}>\n                        <VisibilityIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            rowsPerPageOptions={[10, 25, 50]}\n            component=\"div\"\n            count={filteredPatients.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PatientList;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Paper, FormControl, InputLabel, Select, MenuItem, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst AddPatientForm = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [gender, setGender] = useState('');\n  const [dateOfBirth, setDateOfBirth] = useState('');\n  const [phones, setPhones] = useState(['']);\n  const [emails, setEmails] = useState(['']);\n  const [primaryAddress, setPrimaryAddress] = useState('');\n  const [secondaryAddress, setSecondaryAddress] = useState('');\n  const [isActive, setIsActive] = useState('Active');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const patient = {\n      firstName,\n      lastName,\n      gender,\n      dateOfBirth,\n      isActive,\n      ContactInfo: [\n        ...phones.map(phone => ({ ContactType: 'Phone', ContactDetail: phone })),\n        ...emails.map(email => ({ ContactType: 'Email', ContactDetail: email })),\n      ],\n      Addresses: [\n        { AddressType: 'Primary', AddressDetail: primaryAddress },\n        { AddressType: 'Secondary', AddressDetail: secondaryAddress }\n      ]\n    };\n\n    try {\n      const response = await axios.post('https://localhost:7141/api/patients', patient);\n      console.log(response.data);\n      alert('Patient added successfully!');\n      setFirstName('');\n      setLastName('');\n      setGender('');\n      setDateOfBirth('');\n      setPhones(['']);\n      setEmails(['']);\n      setPrimaryAddress('');\n      setSecondaryAddress('');\n      setIsActive('Active');\n    } catch (error) {\n      if (error.response) {\n        console.error('Error adding patient:', error.response.data);\n        alert(`Error adding patient: ${error.response.data}`);\n      } else if (error.request) {\n        console.error('Error adding patient: No response received');\n        alert('Error adding patient: No response received');\n      } else {\n        console.error('Error adding patient:', error.message);\n        alert(`Error adding patient: ${error.message}`);\n      }\n    }\n  };\n\n  const handleAddPhone = () => {\n    setPhones([...phones, '']);\n  };\n\n  const handleAddEmail = () => {\n    setEmails([...emails, '']);\n  };\n\n  const handleChangePhone = (index, e) => {\n    const newPhones = phones.map((phone, i) => (i === index ? e.target.value : phone));\n    setPhones(newPhones);\n  };\n\n  const handleChangeEmail = (index, e) => {\n    const newEmails = emails.map((email, i) => (i === index ? e.target.value : email));\n    setEmails(newEmails);\n  };\n\n  const handleRemovePhone = (index) => {\n    setPhones(phones.filter((_, i) => i !== index));\n  };\n\n  const handleRemoveEmail = (index) => {\n    setEmails(emails.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Add New Patient</h2>\n      <Paper style={{ padding: '16px' }}>\n        <form onSubmit={handleSubmit}>\n          <h3>Demographics</h3>\n          <TextField\n            label=\"First Name\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n            required\n          />\n          <TextField\n            label=\"Last Name\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n            required\n          />\n          <FormControl fullWidth margin=\"normal\" required>\n            <InputLabel>Gender</InputLabel>\n            <Select\n              value={gender}\n              onChange={(e) => setGender(e.target.value)}\n              label=\"Gender\"\n            >\n              <MenuItem value=\"Male\">Male</MenuItem>\n              <MenuItem value=\"Female\">Female</MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            label=\"Date of Birth\"\n            variant=\"outlined\"\n            type=\"date\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{ shrink: true }}\n            value={dateOfBirth}\n            onChange={(e) => setDateOfBirth(e.target.value)}\n            required\n          />\n          <h3>Addresses</h3>\n          <TextField\n            label=\"Primary Address\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={primaryAddress}\n            onChange={(e) => setPrimaryAddress(e.target.value)}\n            required\n          />\n          <TextField\n            label=\"Secondary Address (Optional)\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={secondaryAddress}\n            onChange={(e) => setSecondaryAddress(e.target.value)}\n          />\n          <h3>Contact Info</h3>\n          {phones.map((phone, index) => (\n            <div key={index} style={{ marginBottom: '16px', display: 'flex', alignItems: 'center' }}>\n              <TextField\n                label=\"Phone Number\"\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={phone}\n                onChange={(e) => handleChangePhone(index, e)}\n                required\n              />\n              {index > 0 && (\n                <IconButton size=\"small\" color=\"secondary\" onClick={() => handleRemovePhone(index)} style={{ marginLeft: '8px' }}>\n                  <DeleteIcon />\n                </IconButton>\n              )}\n            </div>\n          ))}\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleAddPhone}>\n            Add Phone Number\n          </Button>\n          {emails.map((email, index) => (\n            <div key={index} style={{ marginBottom: '16px', display: 'flex', alignItems: 'center' }}>\n              <TextField\n                label=\"Email Address\"\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={email}\n                onChange={(e) => handleChangeEmail(index, e)}\n                required\n              />\n              {index > 0 && (\n                <IconButton size=\"small\" color=\"secondary\" onClick={() => handleRemoveEmail(index)} style={{ marginLeft: '8px' }}>\n                  <DeleteIcon />\n                </IconButton>\n              )}\n            </div>\n          ))}\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleAddEmail}>\n            Add Email Address\n          </Button>\n          <Button size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: '8px', display: 'block' }}>\n            Add Patient\n          </Button>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nexport default AddPatientForm;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Paper, MenuItem, IconButton } from '@mui/material';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst UpdatePatientForm = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [patient, setPatient] = useState({\n    firstName: '',\n    lastName: '',\n    gender: '',\n    dateOfBirth: '',\n    primaryAddress: '',\n    secondaryAddress: '',\n    phoneContacts: [],\n    emailContacts: [],\n    isActive: '', // Default value\n    inactiveReason: ''\n  });\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        // Fetch patient information\n        const { data: patientData } = await axios.get(`https://localhost:7141/api/patients/${id}`);\n        // Fetch addresses\n        const { data: addresses } = await axios.get(`https://localhost:7141/api/patients/${id}/addresses`);\n        // Fetch contacts\n        const { data: contactsData } = await axios.get(`https://localhost:7141/api/patients/${id}/contacts`);\n        const contacts = contactsData.$values || [];\n\n        // Extract address details\n        const primaryAddress = addresses.primaryAddress || '';\n        const secondaryAddress = addresses.secondaryAddress || '';\n\n        // Separate phone and email contacts\n        const phoneContacts = contacts.filter(c => c.contactType === 'Phone').map(c => c.contactDetail);\n        const emailContacts = contacts.filter(c => c.contactType === 'Email').map(c => c.contactDetail);\n\n        // Format date of birth\n        const date = new Date(patientData.dateOfBirth);\n        date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n        const formattedDateOfBirth = date.toISOString().split('T')[0];\n\n        setPatient({\n          firstName: patientData.firstName,\n          lastName: patientData.lastName,\n          gender: patientData.gender,\n          dateOfBirth: formattedDateOfBirth,\n          primaryAddress,\n          secondaryAddress,\n          phoneContacts,\n          emailContacts,\n          isActive: patientData.isActive,\n          inactiveReason: patientData.inactiveReason || ''\n        });\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      }\n    };\n\n    fetchPatient();\n  }, [id]);\n\n  const handleChange = (e) => {\n    setPatient({ ...patient, [e.target.name]: e.target.value });\n  };\n\n  const handleChangeContact = (index, type, e) => {\n    const updatedContacts = [...patient[type]];\n    updatedContacts[index] = e.target.value;\n    setPatient({ ...patient, [type]: updatedContacts });\n  };\n\n  const handleAddContact = (type) => {\n    setPatient({ ...patient, [type]: [...patient[type], ''] });\n  };\n\n  const handleRemoveContact = (index, type) => {\n    const updatedContacts = patient[type].filter((_, i) => i !== index);\n    setPatient({ ...patient, [type]: updatedContacts });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!patient.primaryAddress.trim()) {\n      alert('Primary address cannot be empty.');\n      return;\n    }\n    if (patient.phoneContacts.length === 0) {\n      alert('At least one phone contact is required.');\n      return;\n    }\n    if (patient.emailContacts.length === 0) {\n      alert('At least one email contact is required.');\n      return;\n    }\n    if (patient.isActive === 'Inactive' && !patient.inactiveReason) {\n      alert('Please provide a reason for inactivation.');\n      return;\n    }\n    try {\n      const dataToSubmit = {\n        PatientID: id,\n        firstName: patient.firstName,\n        lastName: patient.lastName,\n        gender: patient.gender,\n        dateOfBirth: patient.dateOfBirth,\n        isActive: patient.isActive === 'Active', // Convert to boolean\n        inactiveReason: patient.isActive === 'Active' ? null : patient.inactiveReason,\n        ContactInfo: [\n          ...patient.phoneContacts.map(contact => ({ ContactType: 'Phone', ContactDetail: contact, PatientID: id })),\n          ...patient.emailContacts.map(contact => ({ ContactType: 'Email', ContactDetail: contact, PatientID: id }))\n        ],\n        Addresses: [\n          { AddressType: 'Primary', AddressDetail: patient.primaryAddress, PatientID: id },\n          { AddressType: 'Secondary', AddressDetail: patient.secondaryAddress, PatientID: id }\n        ]\n      };\n      console.log('Data to be submitted:', dataToSubmit);\n      await axios.put(`https://localhost:7141/api/patients/${id}`, dataToSubmit);\n      alert('Patient updated successfully!');\n      navigate('/');\n    } catch (error) {\n      console.error('Error updating patient:', error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Update Patient</h2>\n      <Paper style={{ padding: '16px' }}>\n        <h3>Demographics</h3>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"First Name\"\n            name=\"firstName\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.firstName}\n            onChange={handleChange}\n            required\n            error={!patient.firstName.trim()}\n          />\n          <TextField\n            label=\"Last Name\"\n            name=\"lastName\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.lastName}\n            onChange={handleChange}\n            required\n            error={!patient.lastName.trim()}\n          />\n          <TextField\n            label=\"Gender\"\n            name=\"gender\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.gender}\n            onChange={handleChange}\n            required\n            select\n          >\n            <MenuItem value=\"Male\">Male</MenuItem>\n            <MenuItem value=\"Female\">Female</MenuItem>\n          </TextField>\n          <TextField\n            label=\"Date of Birth\"\n            name=\"dateOfBirth\"\n            variant=\"outlined\"\n            type=\"date\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{ shrink: true }}\n            value={patient.dateOfBirth}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Status\"\n            name=\"isActive\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.isActive}\n            onChange={handleChange}\n            required\n            select\n          >\n            <MenuItem value=\"Active\">Active</MenuItem>\n            <MenuItem value=\"Inactive\">Inactive</MenuItem>\n          </TextField>\n          {patient.isActive === 'Inactive' && (\n            <TextField\n              label=\"Reason for Inactivation\"\n              name=\"inactiveReason\"\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              value={patient.inactiveReason}\n              onChange={handleChange}\n              required\n              error={!patient.inactiveReason.trim()}\n            />\n          )}\n          <h3>Addresses</h3>\n          <TextField\n            label=\"Primary Address\"\n            name=\"primaryAddress\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.primaryAddress}\n            onChange={handleChange}\n            required\n            error={!patient.primaryAddress.trim()}\n          />\n          <TextField\n            label=\"Secondary Address\"\n            name=\"secondaryAddress\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.secondaryAddress}\n            onChange={handleChange}\n          />\n          <h3>Contacts</h3>\n          {patient.phoneContacts.map((contact, index) => (\n            <div key={index} style={{ display: 'flex', alignItems: 'center' }}>\n              <TextField\n                label={`Phone Contact ${index + 1}`}\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={contact}\n                onChange={(e) => handleChangeContact(index, 'phoneContacts', e)}\n                required\n                error={!contact.trim()}\n              />\n              <IconButton\n                color=\"error\"\n                onClick={() => handleRemoveContact(index, 'phoneContacts')}\n                style={{ marginLeft: '8px' }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </div>\n          ))}\n          <Button variant=\"outlined\" onClick={() => handleAddContact('phoneContacts')}>\n            Add Phone Contact\n          </Button>\n          {patient.emailContacts.map((contact, index) => (\n            <div key={index} style={{ display: 'flex', alignItems: 'center' }}>\n              <TextField\n                label={`Email Contact ${index + 1}`}\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={contact}\n                onChange={(e) => handleChangeContact(index, 'emailContacts', e)}\n                required\n                error={!contact.trim()}\n              />\n              <IconButton\n                color=\"error\"\n                onClick={() => handleRemoveContact(index, 'emailContacts')}\n                style={{ marginLeft: '8px' }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </div>\n          ))}\n          <Button variant=\"outlined\" onClick={() => handleAddContact('emailContacts')}>\n            Add Email Contact\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: '16px' }}>\n            Update Patient\n          </Button>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nexport default UpdatePatientForm;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Typography, Paper, Button, Box } from '@mui/material';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst PatientDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [patient, setPatient] = useState({\n    firstName: '',\n    lastName: '',\n    gender: '',\n    dateOfBirth: '',\n    primaryAddress: '',\n    secondaryAddress: '',\n    phoneContacts: [],\n    emailContacts: [],\n    status: '',\n    inactiveReason: '' // Field for inactive reason\n  });\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        // Fetch patient details\n        const { data: patientData } = await axios.get(`https://localhost:7141/api/patients/${id}`);\n        console.log('Patient data:', patientData);\n\n        // Fetch addresses and contacts\n        const { data: addresses } = await axios.get(`https://localhost:7141/api/patients/${id}/addresses`);\n        const { data: contactsData } = await axios.get(`https://localhost:7141/api/patients/${id}/contacts`);\n        const contacts = contactsData.$values || [];\n\n        // Extract addresses\n        const primaryAddress = addresses.primaryAddress || '';\n        const secondaryAddress = addresses.secondaryAddress || '';\n\n        // Extract and format contacts\n        const phoneContacts = contacts.filter(c => c.contactType === 'Phone').map(c => c.contactDetail);\n        const emailContacts = contacts.filter(c => c.contactType === 'Email').map(c => c.contactDetail);\n        const formattedDateOfBirth = patientData.dateOfBirth ? new Date(patientData.dateOfBirth).toLocaleDateString('en-GB') : '';\n\n        setPatient({\n          firstName: patientData.firstName,\n          lastName: patientData.lastName,\n          gender: patientData.gender,\n          dateOfBirth: formattedDateOfBirth,\n          primaryAddress,\n          secondaryAddress,\n          phoneContacts,\n          emailContacts,\n          status: patientData.isActive,\n          inactiveReason: patientData.inactiveReason || ''\n        });\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      }\n    };\n\n    fetchPatient();\n  }, [id]);\n\n  const handleUpdate = () => {\n    navigate(`/update-patient/${id}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Patient Detail</h2>\n      <Paper style={{ padding: '16px' }}>\n        <Typography variant=\"h6\">Demographics</Typography>\n        <Typography><strong>First Name:</strong> {patient.firstName}</Typography>\n        <Typography><strong>Last Name:</strong> {patient.lastName}</Typography>\n        <Typography><strong>Gender:</strong> {patient.gender}</Typography>\n        <Typography><strong>Date of Birth:</strong> {patient.dateOfBirth}</Typography>\n        <Typography><strong>Status:</strong> {patient.status}</Typography>\n        {patient.status === 'Inactive' && (\n          <Typography><strong>Reason for Inactivation:</strong> {patient.inactiveReason}</Typography>\n        )}\n        <Typography variant=\"h6\">Addresses</Typography>\n        <Typography><strong>Primary Address:</strong> {patient.primaryAddress}</Typography>\n        <Typography><strong>Secondary Address:</strong> {patient.secondaryAddress}</Typography>\n        <Typography variant=\"h6\">Contacts</Typography>\n        {patient.phoneContacts.map((contact, index) => (\n          <Typography key={index}>\n            <strong>Phone {index + 1}:</strong> {contact}\n          </Typography>\n        ))}\n        {patient.emailContacts.map((contact, index) => (\n          <Typography key={index}>\n            <strong>Email {index + 1}:</strong> {contact}\n          </Typography>\n        ))}\n        <Box mt={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleUpdate}>\n            Update Patient\n          </Button>\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PatientDetail;\n","import React from 'react';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport PatientList from './components/PatientList';\nimport AddPatientForm from './components/AddPatientForm';\nimport UpdatePatientForm from './components/UpdatePatientForm';\nimport PatientDetail from './components/PatientDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<PatientList />} />\n        <Route path=\"/add-patient\" element={<AddPatientForm />} />\n        <Route path=\"/update-patient/:id\" element={<UpdatePatientForm />} />\n        <Route path=\"/patient-detail/:id\" element={<PatientDetail />} />\n      </Routes>\n    </div>\n  </Router>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}