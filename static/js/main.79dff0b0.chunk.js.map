{"version":3,"sources":["components/PatientList.js","components/AddPatientForm.js","components/UpdatePatientForm.js","components/PatientDetail.js","App.js","reportWebVitals.js","index.js"],"names":["PatientList","patients","setPatients","useState","filteredPatients","setFilteredPatients","search","setSearch","page","setPage","rowsPerPage","setRowsPerPage","navigate","useNavigate","useEffect","async","data","axios","get","Array","isArray","$values","console","error","fetchPatients","filterPatients","lowercasedSearch","toLowerCase","filtered","filter","patient","_patient$dateOfBirth","matchesName","firstName","lastName","includes","matchesDOB","dateOfBirth","matchesContact","contactInfo","some","contact","contactDetail","matchesStatus","isActive","React","createElement","className","Paper","Box","p","display","flexDirection","gap","alignItems","TextField","variant","label","value","onChange","e","target","InputProps","endAdornment","IconButton","SearchIcon","fullWidth","Button","color","startIcon","AddIcon","onClick","handleAddPatient","Table","TableHead","TableRow","TableCell","TableBody","slice","map","key","patientID","dateString","date","Date","String","getDate","padStart","getMonth","getFullYear","formatDate","Tooltip","title","handleViewDetails","VisibilityIcon","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","AddPatientForm","setFirstName","setLastName","gender","setGender","setDateOfBirth","phones","setPhones","emails","setEmails","primaryAddress","setPrimaryAddress","secondaryAddress","setSecondaryAddress","setIsActive","style","padding","onSubmit","preventDefault","ContactInfo","phone","ContactType","ContactDetail","email","Addresses","AddressType","AddressDetail","response","post","log","alert","request","message","margin","required","FormControl","InputLabel","Select","MenuItem","type","InputLabelProps","shrink","index","marginBottom","handleChangePhone","newPhones","i","size","_","handleRemovePhone","marginTop","handleAddPhone","handleChangeEmail","newEmails","handleRemoveEmail","handleAddEmail","UpdatePatientForm","id","useParams","setPatient","phoneContacts","emailContacts","inactiveReason","patientData","addresses","contactsData","c","contactType","setMinutes","getMinutes","getTimezoneOffset","formattedDateOfBirth","toISOString","split","fetchPatient","handleChange","name","handleChangeContact","updatedContacts","handleAddContact","dataToSubmit","PatientID","put","select","PatientDetail","status","toLocaleDateString","Typography","mt","handleUpdate","App","Router","basename","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.79dff0b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Paper,\n  TextField,\n  TablePagination,\n  Box,\n  IconButton,\n  Tooltip,\n  Button\n} from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport { useNavigate } from 'react-router-dom';\n\nconst PatientList = () => {\n  const [patients, setPatients] = useState([]);\n  const [filteredPatients, setFilteredPatients] = useState([]);\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const response = await axios.get('https://localhost:7141/api/patients');\n        const data = response.data;\n        if (data && Array.isArray(data.$values)) {\n          setPatients(data.$values);\n          setFilteredPatients(data.$values);\n        } else {\n          console.error('Unexpected data format:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    };\n\n    fetchPatients();\n  }, []);\n\n  useEffect(() => {\n    const filterPatients = () => {\n      const lowercasedSearch = search.toLowerCase();\n\n      const filtered = patients.filter(patient => {\n        const fullName = `${patient.firstName} ${patient.lastName}`.toLowerCase();\n        const matchesName = fullName.includes(lowercasedSearch);\n        const matchesDOB = patient.dateOfBirth?.includes(lowercasedSearch);\n        const matchesContact = patient.contactInfo && patient.contactInfo.some(contact => contact.contactDetail.includes(lowercasedSearch));\n        const matchesStatus = patient.isActive.toLowerCase().includes(lowercasedSearch);\n\n        return (\n          matchesName ||\n          matchesDOB ||\n          matchesContact ||\n          matchesStatus\n        );\n      });\n\n      setFilteredPatients(filtered);\n    };\n\n    filterPatients();\n  }, [search, patients]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleViewDetails = (patientID) => {\n    navigate(`/patient-detail/${patientID}`);\n  };\n\n  const handleAddPatient = () => {\n    navigate('/add-patient');\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Patient List</h2>\n      <Paper>\n        <Box p={2} display=\"flex\" flexDirection=\"column\" gap={2}>\n          <Box display=\"flex\" gap={2} alignItems=\"center\">\n            <TextField\n              variant=\"outlined\"\n              label=\"Search (Name, DOB, Contacts, or Status)\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <IconButton>\n                    <SearchIcon />\n                  </IconButton>\n                ),\n              }}\n              fullWidth\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddIcon />}\n              onClick={handleAddPatient}\n            >\n              Add Patient\n            </Button>\n          </Box>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>First Name</TableCell>\n                <TableCell>Last Name</TableCell>\n                <TableCell>Date of Birth</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n                \n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredPatients.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((patient) => (\n                <TableRow key={patient.patientID}>\n                  <TableCell>{patient.firstName}</TableCell>\n                  <TableCell>{patient.lastName}</TableCell>\n                  <TableCell>{formatDate(patient.dateOfBirth)}</TableCell>\n                  <TableCell>{patient.isActive}</TableCell>\n                  \n                  <TableCell>\n                    <Tooltip title=\"View Details\">\n                      <IconButton color=\"primary\" onClick={() => handleViewDetails(patient.patientID)}>\n                        <VisibilityIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            rowsPerPageOptions={[10, 25, 50]}\n            component=\"div\"\n            count={filteredPatients.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PatientList;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Paper, FormControl, InputLabel, Select, MenuItem,  } from '@mui/material';\n\nconst AddPatientForm = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [gender, setGender] = useState('');\n  const [dateOfBirth, setDateOfBirth] = useState('');\n  const [phones, setPhones] = useState(['']);\n  const [emails, setEmails] = useState(['']);\n  const [primaryAddress, setPrimaryAddress] = useState('');\n  const [secondaryAddress, setSecondaryAddress] = useState('');\n  const [isActive, setIsActive] = useState('Active');\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const patient = {\n      firstName,\n      lastName,\n      gender,\n      dateOfBirth,\n      isActive,\n      ContactInfo: [\n        ...phones.map(phone => ({ ContactType: 'Phone', ContactDetail: phone})),\n        ...emails.map(email => ({ ContactType: 'Email', ContactDetail: email})),\n      ],\n      Addresses: [\n        { AddressType: 'Primary', AddressDetail: primaryAddress },\n        { AddressType: 'Secondary', AddressDetail: secondaryAddress }\n      ]\n    };\n\n    \n    try {\n      const response = await axios.post('https://localhost:7141/api/patients', patient);\n      console.log(response.data);\n      alert('Patient added successfully!');\n      setFirstName('');\n      setLastName('');\n      setGender('');\n      setDateOfBirth('');\n      setPhones(['']);\n      setEmails(['']);\n      setPrimaryAddress('');\n      setSecondaryAddress('');\n      setIsActive('Active');\n    } catch (error) {\n      if (error.response) {\n        console.error('Error adding patient:', error.response.data);\n        alert(`Error adding patient: ${error.response.data}`);\n    } else if (error.request) {\n        console.error('Error adding patient: No response received');\n        alert('Error adding patient: No response received');\n    } else {\n        console.error('Error adding patient:', error.message);\n        alert(`Error adding patient: ${error.message}`);\n    }\n    }\n  };\n\n  const handleAddPhone = () => {\n    setPhones([...phones, '']);\n  };\n\n  const handleAddEmail = () => {\n    setEmails([...emails, '']);\n  };\n\n  const handleChangePhone = (index, e) => {\n    const newPhones = phones.map((phone, i) => (i === index ? e.target.value : phone));\n    setPhones(newPhones);\n  };\n\n  const handleChangeEmail = (index, e) => {\n    const newEmails = emails.map((email, i) => (i === index ? e.target.value : email));\n    setEmails(newEmails);\n  };\n\n  const handleRemovePhone = (index) => {\n    setPhones(phones.filter((_, i) => i !== index));\n  };\n\n  const handleRemoveEmail = (index) => {\n    setEmails(emails.filter((_, i) => i !== index));\n  };\n\n\n  return (\n    <div className=\"container\">\n      <h2>Add New Patient</h2>\n      <Paper style={{ padding: '16px' }}>\n        <form onSubmit={handleSubmit}>\n        <h3>Demographics</h3>\n          <TextField\n            label=\"First Name\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n            required\n          />\n          <TextField\n            label=\"Last Name\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n            required\n          />\n          <FormControl fullWidth margin=\"normal\" required>\n            <InputLabel>Gender</InputLabel>\n            <Select\n              value={gender}\n              onChange={(e) => setGender(e.target.value)}\n              label=\"Gender\"\n            >\n              <MenuItem value=\"Male\">Male</MenuItem>\n              <MenuItem value=\"Female\">Female</MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            label=\"Date of Birth\"\n            variant=\"outlined\"\n            type=\"date\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{ shrink: true }}\n            value={dateOfBirth}\n            onChange={(e) => setDateOfBirth(e.target.value)}\n            required\n          />\n                    <h3>Addresses</h3>\n          <TextField\n            label=\"Primary Address\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={primaryAddress}\n            onChange={(e) => setPrimaryAddress(e.target.value)}\n            required\n          />\n          <TextField\n            label=\"Secondary Address (Optional)\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={secondaryAddress}\n            onChange={(e) => setSecondaryAddress(e.target.value)}\n          />\n          <h3>Contact Info</h3>\n          {phones.map((phone, index) => (\n            <div key={index} style={{ marginBottom: '16px' }}>\n              <TextField\n                label=\"Phone Number\"\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={phone}\n                onChange={(e) => handleChangePhone(index, e)}\n                required\n              />\n              {index > 0 && (\n              <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => handleRemovePhone(index)} style={{ marginTop: '8px' }}>\n                Remove Phone\n              </Button>\n              )}\n            </div>\n          ))}\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleAddPhone}>\n            Add Phone Number\n          </Button>\n          {emails.map((email, index) => (\n            <div key={index} style={{ marginBottom: '16px' }}>\n              <TextField\n                label=\"Email Address\"\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={email}\n                onChange={(e) => handleChangeEmail(index, e)}\n                required\n              />\n              {index > 0 && (\n              <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => handleRemoveEmail(index)} style={{ marginTop: '8px' }}>\n                Remove Email\n              </Button>\n              )}\n            </div>\n          ))}\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={handleAddEmail}>\n            Add Email Address\n          </Button>\n\n          <Button size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: '8px',  display: 'block' }}>Add Patient</Button>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nexport default AddPatientForm;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Paper, MenuItem } from '@mui/material';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst UpdatePatientForm = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  \n  const [patient, setPatient] = useState({\n    firstName: '',\n    lastName: '',\n    gender: '',\n    dateOfBirth: '',\n    primaryAddress: '',\n    secondaryAddress: '',\n    phoneContacts: [],\n    emailContacts: [],\n    isActive:'', // default value\n    inactiveReason: '' \n  });\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        // Fetch patient information\n        const patientResponse = await axios.get(`https://localhost:7141/api/patients/${id}`);\n        const patientData = patientResponse.data;\n\n        // Fetch addresses\n        const addressesResponse = await axios.get(`https://localhost:7141/api/patients/${id}/addresses`);\n        const addresses = addressesResponse.data;\n\n        // Fetch contacts\n        const contactsResponse = await axios.get(`https://localhost:7141/api/patients/${id}/contacts`);\n        const contactsData = contactsResponse.data.$values || [];\n\n        // Extract address details\n        const primaryAddress = addresses.primaryAddress || '';\n        const secondaryAddress = addresses.secondaryAddress || '';\n\n        // Separate phone and email contacts\n        const phoneContacts = contactsData.filter(c => c.contactType === 'Phone').map(c => c.contactDetail);\n        const emailContacts = contactsData.filter(c => c.contactType === 'Email').map(c => c.contactDetail);\n\n      // Format date of birth\n      const date = new Date(patientData.dateOfBirth);\n      date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n      const formattedDateOfBirth = date.toISOString().split('T')[0];\n        setPatient({\n          firstName: patientData.firstName,\n          lastName: patientData.lastName,\n          gender: patientData.gender,\n          dateOfBirth: formattedDateOfBirth,\n          primaryAddress,\n          secondaryAddress,\n          phoneContacts,\n          emailContacts,\n          isActive: patientData.isActive,\n          inactiveReason: patientData.inactiveReason || ''\n        });\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      }\n    };\n\n    fetchPatient();\n  }, [id]);\n\n  const handleChange = (e) => {\n    setPatient({ ...patient, [e.target.name]: e.target.value });\n  };\n\n  const handleChangeContact = (index, type, e) => {\n    const updatedContacts = [...patient[type]];\n    updatedContacts[index] = e.target.value;\n    setPatient({ ...patient, [type]: updatedContacts });\n  };\n  \n  const handleAddContact = (type) => {\n    setPatient({ ...patient, [type]: [...patient[type], ''] });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (patient.isActive === 'Inactive' && !patient.inactiveReason) {\n      alert('Please provide a reason for inactivation.');\n      return;\n    }\n    try {\n      const dataToSubmit = {\n        PatientID: id,\n        firstName: patient.firstName,\n        lastName: patient.lastName,\n        gender: patient.gender,\n        dateOfBirth: patient.dateOfBirth,\n        isActive: patient.isActive , // Chuyển đổi thành boolean\n        inactiveReason: patient.isActive === 'Active' ? null : patient.inactiveReason,\n        ContactInfo: [\n          ...patient.phoneContacts.map(contact => ({ ContactType: 'Phone', ContactDetail: contact, PatientID: id })),\n          ...patient.emailContacts.map(contact => ({ ContactType: 'Email', ContactDetail: contact, PatientID: id }))\n        ],\n        Addresses: [\n          { AddressType: 'Primary', AddressDetail: patient.primaryAddress, PatientID: id },\n          { AddressType: 'Secondary', AddressDetail: patient.secondaryAddress, PatientID: id }\n        ]\n      };\n      console.log('Data to be submitted:', dataToSubmit);\n      await axios.put(`https://localhost:7141/api/patients/${id}`, dataToSubmit);\n      alert('Patient updated successfully!');\n      navigate('/');\n    } catch (error) {\n      console.error('Error updating patient:', error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Update Patient</h2>\n      <Paper style={{ padding: '16px' }}>\n        <h3>Demographics</h3>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"First Name\"\n            name=\"firstName\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.firstName}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Last Name\"\n            name=\"lastName\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.lastName}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Gender\"\n            name=\"gender\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.gender}\n            onChange={handleChange}\n            required\n            select\n          >\n            <MenuItem value=\"Male\">Male</MenuItem>\n            <MenuItem value=\"Female\">Female</MenuItem>\n          </TextField>\n          <TextField\n            label=\"Date of Birth\"\n            name=\"dateOfBirth\"\n            variant=\"outlined\"\n            type=\"date\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{ shrink: true }}\n            value={patient.dateOfBirth}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Status\"\n            name=\"isActive\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.isActive}\n            onChange={handleChange}\n            required\n            select\n          >\n            <MenuItem value=\"Active\">Active</MenuItem>\n            <MenuItem value=\"Inactive\">Inactive</MenuItem>\n          </TextField>\n          {patient.isActive === 'Inactive' && (\n            <TextField\n              label=\"Reason for Inactivation\"\n              name=\"inactiveReason\"\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              value={patient.inactiveReason}\n              onChange={handleChange}\n              required\n            />\n          )}\n          <h3>Addresses</h3>\n          <TextField\n            label=\"Primary Address\"\n            name=\"primaryAddress\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.primaryAddress}\n            onChange={handleChange}\n          />\n          <TextField\n            label=\"Secondary Address\"\n            name=\"secondaryAddress\"\n            variant=\"outlined\"\n            fullWidth\n            margin=\"normal\"\n            value={patient.secondaryAddress}\n            onChange={handleChange}\n          />\n          <h3>Contacts</h3>\n          {patient.phoneContacts.map((contact, index) => (\n            <TextField\n              key={index}\n              label={`Phone Contact ${index + 1}`}\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              value={contact}\n              onChange={(e) => handleChangeContact(index, 'phoneContacts', e)}\n            />\n          ))}\n          <Button variant=\"outlined\" onClick={() => handleAddContact('phoneContacts')}>\n            Add Phone Contact\n          </Button>\n          {patient.emailContacts.map((contact, index) => (\n            <TextField\n              key={index}\n              label={`Email Contact ${index + 1}`}\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n              value={contact}\n              onChange={(e) => handleChangeContact(index, 'emailContacts', e)}\n            />\n          ))}\n          <Button variant=\"outlined\" onClick={() => handleAddContact('emailContacts')}>\n            Add Email Contact\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: '8px', display: 'block' }}>Update Patient</Button>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nexport default UpdatePatientForm;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Typography, Paper, Button, Box } from '@mui/material';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst PatientDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  \n  const [patient, setPatient] = useState({\n    firstName: '',\n    lastName: '',\n    gender: '',\n    dateOfBirth: '',\n    primaryAddress: '',\n    secondaryAddress: '',\n    phoneContacts: [],\n    emailContacts: [],\n    status: '',\n    inactiveReason: '' // Add this field to the state\n  });\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        \n        // Fetch patient information\n        const response = await axios.get(`https://localhost:7141/api/patients/${id}`);\n        const patientData = response.data;\n        console.log('Patient data:', response.data); // Kiểm tra dữ liệu\n\n        // Fetch addresses\n        const addressesResponse = await axios.get(`https://localhost:7141/api/patients/${id}/addresses`);\n        const addresses = addressesResponse.data;\n\n        // Fetch contacts\n        const contactsResponse = await axios.get(`https://localhost:7141/api/patients/${id}/contacts`);\n        const contactsData = contactsResponse.data.$values || [];\n\n        // Ensure addresses is an object and has the necessary properties\n        const primaryAddress = addresses.primaryAddress || '';\n        const secondaryAddress = addresses.secondaryAddress || '';\n\n\n        // Separate phone and email contacts\n        const phoneContacts = contactsData.filter(c => c.contactType === 'Phone').map(c => c.contactDetail);\n        const emailContacts = contactsData.filter(c => c.contactType === 'Email').map(c => c.contactDetail);\n\n        // Format date of birth\n        const formattedDateOfBirth = patientData.dateOfBirth ? new Date(patientData.dateOfBirth).toLocaleDateString('en-GB') : '';\n\n        setPatient({\n          firstName: patientData.firstName,\n          lastName: patientData.lastName,\n          gender: patientData.gender,\n          dateOfBirth: formattedDateOfBirth,\n          primaryAddress,\n          secondaryAddress,\n          phoneContacts,\n          emailContacts,\n          status: patientData.isActive,\n          inactiveReason: patientData.inactiveReason || '' // Fetch inactive reason\n        });\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      }\n    };\n\n    fetchPatient();\n  }, [id]);\n\n  const handleUpdate = () => {\n    navigate(`/update-patient/${id}`);\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Patient Detail</h2>\n      <Paper style={{ padding: '16px' }}>\n        <Typography variant=\"h6\">Demographics</Typography>\n        <Typography><strong>First Name:</strong> {patient.firstName}</Typography>\n        <Typography><strong>Last Name:</strong> {patient.lastName}</Typography>\n        <Typography><strong>Gender:</strong> {patient.gender}</Typography>\n        <Typography><strong>Date of Birth:</strong> {patient.dateOfBirth}</Typography>\n        <Typography><strong>Status:</strong> {patient.status}</Typography>\n        {patient.status === 'Inactive' && (\n          <Typography><strong>Reason for Inactivation:</strong> {patient.inactiveReason}</Typography>\n        )}\n        <Typography variant=\"h6\">Addresses</Typography>\n        <Typography><strong>Primary Address:</strong> {patient.primaryAddress}</Typography>\n        <Typography><strong>Secondary Address:</strong> {patient.secondaryAddress}</Typography>\n        <Typography variant=\"h6\">Contacts</Typography>\n        {patient.phoneContacts.map((contact, index) => (\n          <Typography key={index}>\n            <strong>Phone {index + 1}:</strong> {contact}\n          </Typography>\n        ))}\n        {patient.emailContacts.map((contact, index) => (\n          <Typography key={index}>\n            <strong>Email {index + 1}:</strong> {contact}\n          </Typography>\n        ))}\n        <Box mt={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleUpdate}>\n            Update Patient\n          </Button>\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PatientDetail;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport PatientList from './components/PatientList';\nimport AddPatientForm from './components/AddPatientForm';\nimport UpdatePatientForm from './components/UpdatePatientForm';\nimport PatientDetail from './components/PatientDetail';\n\nconst App = () => (\n  <Router basename=\"/Patient-Management-Application\">\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<PatientList />} />\n        <Route path=\"/add-patient\" element={<AddPatientForm />} />\n        <Route path=\"/update-patient/:id\" element={<UpdatePatientForm />} />\n        <Route path=\"/patient-detail/:id\" element={<PatientDetail />} />\n      </Routes>\n    </div>\n  </Router>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}